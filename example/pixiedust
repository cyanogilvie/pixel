#!/usr/bin/itkwish3.1

# vim: ft=tcl


package require Pixel
namespace import pixel::*
package require Pixel_imlib2
package require Pixel_tkimage
package require Pixel_fonts

set img		[pixel::imlib2::load_image "kenshin2.png"]

set flare1	[pixel::imlib2::load_image "flare.png"]
pmap_filter $flare1 $::MD_FILTER_ALPHA 0.5
foreach {fw fh} [pmap_info $flare1] break
set it		3
set fade	0.2
set base	0.8
set flares	[list $flare1]
while {[incr it -1]} {
	set fw		[expr {$fw >> 1}]
	set fh		[expr {$fh >> 1}]
	set new		[pixel::dup $flare1]
	pmap_filter $new $::MD_FILTER_ALPHA $base
	set base	[expr {$base * $fade}]
	lappend flares	$new
}


set buttonimg	[pixel::imlib2::load_image "window.png"]

pixel::fonts::Font fontreg

array set text_info [list \
	base_col	0xffdf0020 \
	face		[fontreg get_face {arial {bold italic}}] \
	px_size		18 \
]
set textimg	[render_ttf_adv text_info "Hello world"]
set dropshadow	[pmap_dropshadow $textimg 2]
pmap_filter $dropshadow $::MD_FILTER_ALPHA 0.7

foreach {width height} [pmap_info $textimg] break

set scaled	[pixel::imlib2::scale_pmap $buttonimg \
		[expr {$width+16}] \
		[expr {$height+16}] \
		1 2 2 2 2]

# Paste our dropshadow and text pmap onto the button
pmap_paste $scaled $dropshadow 8 8 $::MD_ALPHA
pmap_filter $scaled $::MD_FILTER_ALPHA 0.75
pmap_paste $scaled $textimg 8 8 $::MD_ALPHA

class Particle {
	constructor {args} {
		eval configure $args

		set spawned	[clock clicks -milliseconds]

		set xv		[expr {40 - rand() * 80}]
		set ::particles($this)	1

		set aty		$y
		set atx		$x
	}

	destructor {
		unset ::particles($this)
	}

	public {
		method draw {dest} {
			age
			if {![info exists pmap]} return
			set t	[expr {$atx - $w/2}]
			set l	[expr {$aty - $h/2}]
			pmap_paste $dest $pmap $t $l $::MD_ADDITIVE
		}
		method undraw {dest ref} {
			if {![info exists pmap]} return
			set t	[expr {$atx - $w/2}]
			set l	[expr {$aty - $h/2}]
			pmap_patch $dest $ref \
					$t \
					$l \
					[expr {$t + $w}] \
					[expr {$l + $h}] \
					$t $l \
					0
		}

		variable x
		variable y
		variable g			40
		variable life		1.0
	}

	private {
		variable spawned
		variable pmap
		variable w
		variable h
		variable atx
		variable aty
		variable xv

		method age {} {
			set elapsed	[expr {[clock clicks -milliseconds] - $spawned}]
			if {$elapsed >= $life * 1000} {
				delete object $this
				unset pmap
				return
			}

			set perc	[expr {$elapsed / ($life * 1000)}]
			
			set pmap	[lindex $::flares [expr {int($perc * [llength $::flares])}]]
			if {[catch {
				foreach {w h} [pmap_info $pmap] break
			} msg]} {
				puts "error: ($msg)\n($pmap)"
			}

			set atx		[expr {round($x + $perc * $xv)}]
			set aty		[expr {round($aty + ($elapsed * $g) / 1000)}]
		}
	}
}


array set particles	{}
proc spawn_dust {x y} {
	Particle ::#auto -x $x -y [expr {$y + 15}]
}

image create pmap tkimg -pmap $img

label .img_l -text "Image:"
label .img -image tkimg

bind .img <Motion> {spawn_dust %x %y}

pack .img_l .img -side top -anchor w

foreach {bg_w bg_h} [pmap_info $img] break
foreach {atx aty} [center 0 0 $bg_w $bg_h $scaled] break

pmap_paste $img $scaled $atx $aty $::MD_ALPHA
set bg	[pixel::dup $img]

proc do_idle {} {
	foreach particle [array names ::particles] {
		$particle undraw $::img $::bg
	}
	foreach particle [array names ::particles] {
		$particle draw $::img
	}
	tkimg do_frame
	update
	after idle do_idle
}

do_idle
