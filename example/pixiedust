# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4

lappend auto_path	[file join $env(HOME) .tbuild repo pkg linux-glibc2.10-x86_64]
package require Pixel
package require Pixel_imlib2
package require Pixel_sdl
package require Pixel_ttf
package require Pixel_fonts
package require cflib

namespace path [concat [namespace path] {
	::pixel
	::pixel::ttf
	::tcl::mathop
}]

set scr_width	1024
set scr_height	768

set scr		[pixel::sdl::setup_screen $scr_width $scr_height 32 {SDL_ANYFORMAT}]

set img		[pixel::imlib2::load_image "kenshin2.png"]
pmap_paste $scr $img 0 0 0

set flare1	[pixel::imlib2::load_image "flare.png"]
pmap_filter $flare1 $::pixel::MD_FILTER_ALPHA 0.5
lassign [pixel::pmap_info $flare1] fw fh
set it		3
set fade	0.2
set base	0.8
set flares	[list $flare1]
while {[incr it -1]} {
	set fw		[expr {$fw >> 1}]
	set fh		[expr {$fh >> 1}]
	set new		[pixel::dup $flare1]
	pmap_filter $new $::pixel::MD_FILTER_ALPHA $base
	set base	[expr {$base * $fade}]
	lappend flares	$new
}


set buttonimg	[pixel::imlib2::load_image "window.png"]

pixel::fonts::Font create fontreg

set text_info [dict create \
	base_col	0xffdf0020 \
	face		[fontreg get_face {arial {bold italic}}] \
	px_size		18 \
]
set textimg	[render_ttf_adv $text_info "Hello world" feedback]
puts "render_ttf_adv feedback: ($feedback)"
set dropshadow	[pmap_dropshadow $textimg 2]
pmap_filter $dropshadow $::pixel::MD_FILTER_ALPHA 0.7

lassign [pmap_info $textimg] width height

set scaled	[pixel::imlib2::scale_pmap $buttonimg \
		[expr {$width+16}] \
		[expr {$height+16}] \
		1 2 2 2 2]

# Paste our dropshadow and text pmap onto the button
pmap_paste $scaled $dropshadow 8 8 $::pixel::MD_ALPHA
pmap_filter $scaled $::pixel::MD_FILTER_ALPHA 0.75
pmap_paste $scaled $textimg 8 8 $::pixel::MD_ALPHA

cflib::pclass create Particle {
	property x
	property y
	property g			40
	property life		1.0

	variable {*}{
		spawned
		pmap
		w
		h
		atx
		aty
		xv
	}

	constructor {args} { #<<<
		namespace path [concat [namespace path] {
			::pixel
			::pixel::ttf
			::tcl::mathop
		}]

		my configure {*}$args

		set spawned	[clock clicks -milliseconds]

		set xv		[expr {40 - rand() * 80}]
		set ::particles([self])	1

		set aty		$y
		set atx		$x
	}

	#>>>
	destructor { #<<<
		unset ::particles([self])
	}

	#>>>

	method draw {dest} { #<<<
		my _age
		if {![info exists pmap]} return
		set t	[expr {$atx - $w/2}]
		set l	[expr {$aty - $h/2}]
		pmap_paste $dest $pmap $t $l $::pixel::MD_ADDITIVE
	}

	#>>>
	method undraw {dest ref} { #<<<
		if {![info exists pmap]} return
		set t	[expr {$atx - $w/2}]
		set l	[expr {$aty - $h/2}]
		pmap_patch $dest $ref \
				$t \
				$l \
				[expr {$t + $w}] \
				[expr {$l + $h}] \
				$t $l \
				0
	}

	#>>>

	method _age {} { #<<<
		set elapsed	[expr {[clock clicks -milliseconds] - $spawned}]
		if {$elapsed >= $life * 1000} {
			my destroy
			unset pmap
			return
		}

		set perc	[expr {$elapsed / ($life * 1000)}]
		
		set pmap	[lindex $::flares [expr {int($perc * [llength $::flares])}]]
		try {
			lassign [pmap_info $pmap] w h
		} on error {errmsg options} {
			puts "error: ($errmsg)\n($pmap)"
		}

		set atx		[expr {round($x + $perc * $xv)}]
		set aty		[expr {round($aty + ($elapsed * $g) / 1000)}]
	}

	#>>>
}


array set particles	{}
# Keyboard event handler <<<
pixel::sdl::bind_events key [list apply {
	{evname ev} {
		dict with ev {}

		if {$state eq "SDL_PRESSED"} {
			if {$ascii eq "q" || $sym eq 27} {
				exit
			}
		}
	}
}]
# Keyboard event handler >>>
# Expose event handler <<<
pixel::sdl::bind_events expose [list apply {
	{evname ev} {
		pixel::sdl::do_frame $::scr
	}
}]
# Expose event handler >>>
# Mouse motion event handler <<<
pixel::sdl::bind_events motion [list apply {
	{evname ev} {
		Particle new -x [dict get $ev x] -y [expr {[dict get $ev y] + 15}]
	}
}]
# Mouse motion event handler >>>
# Quit event handler <<<
pixel::sdl::bind_events expose [list apply {
	{evname ev} {
		exit 0
	}
}]
# Quit event handler >>>

lassign [pmap_info $scr] bg_w bg_h
lassign [center 0 0 $bg_w $bg_h $scaled] atx aty

pmap_paste $scr $scaled $atx $aty $::pixel::MD_ALPHA
set bg	[pixel::dup $scr]

proc do_idle {} {
	foreach particle [array names ::particles] {
		$particle undraw $::scr $::bg
	}
	foreach particle [array names ::particles] {
		$particle draw $::scr
	}
	pixel::sdl::dispatch_events
	pixel::sdl::do_frame $::scr
	update
	after 18 do_idle
}

do_idle

vwait ::forever
