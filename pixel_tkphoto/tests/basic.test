# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> shiftwidth=4 ts=4

if {[lsearch [namespace children] ::tcltest] == -1} {
	package require tcltest 2.2.5
	namespace import ::tcltest::*
}


package require Tk
wm withdraw .

package require Pixel_tkimage

test basic-1.1 {Wrap a pmap in an image, explicit name} -body { #<<<
	set pmap	[pixel::pmap_new 100 100 0x0]
	image create pmap testimage -pmap $pmap
} -cleanup {
	if {[lsearch [image names] testimage] != -1} {
		image delete testimage
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -result {testimage}
#>>>
test basic-1.2 {Wrap a pmap in an image, autogenerated name} -body { #<<<
	set pmap	[pixel::pmap_new 100 100 0x0]
	set img		[image create pmap -pmap $pmap]
} -cleanup {
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -match regexp -result {^image[0-9]+$}
#>>>
test basic-1.3 {imageName pmap method} -body { #<<<
	set pmap	[pixel::pmap_new 100 100 0x0]
	set img		[image create pmap -pmap $pmap]
	pixel::pmap_info [$img pmap]
} -cleanup {
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -result {100 100}
#>>>
test basic-1.4 {imageName do_frame method, with no instances} -body { #<<<
	set pmap	[pixel::pmap_new 100 100 0x0]
	pixel::box $pmap 0 0 100 100 0xff000000 0
	set img		[image create pmap -pmap $pmap]
	pixel::box $pmap 10 10 80 80 0xffff0000 0
	$img do_frame
} -cleanup {
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -result {}
#>>>
test basic-1.5 {imageName do_frame method, with instances} -body { #<<<
	set pmap	[pixel::pmap_new 100 100 0x0]
	pixel::box $pmap 0 0 100 100 0xff000000 0
	set img		[image create pmap -pmap $pmap]
	label .l -image $img
	pixel::box $pmap 10 10 80 80 0xffff0000 0
	$img do_frame
} -cleanup {
	if {[winfo exists .l]} {
		destroy .l
	}
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -result {}
#>>>
test basic-1.6 {pixel::tkimage::do_frame command} -constraints {knownBug} -body { #<<<
	set pmap	[pixel::pmap_new 100 100 0x0]
	pixel::box $pmap 0 0 100 100 0xff000000 0
	set img		[image create pmap -pmap $pmap]
	pixel::box $pmap 10 10 80 80 0xffff0000 0
	pixel::tkimage::do_frame $pmap
} -cleanup {
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -result {}
#>>>
test basic-1.7 {Free image on command delete} -body { #<<<
	set pmap	[pixel::pmap_new 100 100 0x0]
	pixel::box $pmap 0 0 100 100 0xff000000 0
	set img		[image create pmap -pmap $pmap]
	rename $img {}
	lsearch [image names] $img
} -cleanup {
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -result {-1}
#>>>
test basic-1.8 {Reconfiguring -pmap} -constraints {knownBug} -body { #<<<
	set pmap	[pixel::pmap_new 100 100 0x0]
	pixel::box $pmap 0 0 100 100 0xff000000 0
	set pmap2	[pixel::pmap_new 200 200 0x0]
	pixel::box $pmap 0 0 200 200 0xffff0000 0
	set img		[image create pmap -pmap $pmap -pmap $pmap2]
	set res		[$img pmap]
	pixel::pmap_info $res
} -cleanup {
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
	if {[info exists pmap2]} {
		unset pmap2
	}
	if {[info exists res]} {
		unset res
	}
} -result {200 200}
#>>>
test basic-1.9 {Autogen pmap} -constraints {knownBug} -body { #<<<
	set img		[image create pmap -width 100 -height 100]
	set res		[$img pmap]
	pixel::box $res 0 0 100 100 0xff0000ff 0
	$img do_frame
	pixel::pmap_info $res
} -cleanup {
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists res]} {
		unset res
	}
} -result {100 100}
#>>>
test basic-1.10 {Explicit size} -body { #<<<
	set pmap	[pixel::pmap_new 50 50 0x0]
	pixel::box $pmap 0 0 50 50 0xff000000 0
	set img		[image create pmap -pmap $pmap -width 100 -height 150]
	label .l -image $img -borderwidth 0
	set res		[$img pmap]
	list [pixel::pmap_info $res] [list [winfo reqwidth .l] [winfo reqheight .l]]
} -cleanup {
	if {[winfo exists .l]} {
		destroy .l
	}
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
	if {[info exists res]} {
		unset res
	}
} -result {{50 50} {100 150}}
#>>>
test basic-1.11 {Handling of invalid option} -body { #<<<
	set pmap	[pixel::pmap_new 50 50 0x0]
	pixel::box $pmap 0 0 50 50 0xff000000 0
	set img		[image create pmap -pmap $pmap -makecoffee true]
} -cleanup {
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -returnCodes {
	error
} -result {Unknown option: -makecoffee}
#>>>
test basic-1.12 {Invalid method of imageName command} -body { #<<<
	set pmap	[pixel::pmap_new 50 50 0x0]
	pixel::box $pmap 0 0 50 50 0xff000000 0
	set img		[image create pmap -pmap $pmap]
	$img makecoffee
} -cleanup {
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -returnCodes {
	error
} -result {bad command "makecoffee": must be pmap, do_frame, or configure}
#>>>
test basic-1.13 {Test display proc} -body { #<<<
	set pmap	[pixel::pmap_new 50 50 0x0]
	pixel::box $pmap 0 0 50 50 0xff000000 0
	pixel::box $pmap 10 10 30 30 0xff00ff00 0
	set img		[image create pmap -pmap $pmap]
	label .l -image $img
	pack .l
	wm deiconify .
	update
} -cleanup {
	wm withdraw .
	if {[winfo exists .l]} {
		destroy .l
	}
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -returnCodes {
	ok
} -result {}
#>>>
test basic-1.14 {Multiple instances} -body { #<<<
	set pmap	[pixel::pmap_new 50 50 0x0]
	pixel::box $pmap 0 0 50 50 0xff000000 0
	pixel::box $pmap 10 10 30 30 0xff00ff00 0
	set img		[image create pmap -pmap $pmap]
	label .l1 -image $img
	label .l2 -image $img
	pack .l1 .l2
	wm deiconify .
	update
} -cleanup {
	wm withdraw .
	if {[winfo exists .l1]} {
		destroy .l1
	}
	if {[winfo exists .l2]} {
		destroy .l2
	}
	if {[info exists img]} {
		if {[lsearch [image names] $img] != -1} {
			image delete $img
		}
		unset img
	}
	if {[info exists pmap]} {
		unset pmap
	}
} -returnCodes {
	ok
} -result {}
#>>>
test basic-1.15 {pixel::tkimage::do_frame bad arguments} -body { #<<<
	pixel::tkimage::do_frame
} -returnCodes {
	error
} -result {Wrong # of arguments.  Must be "tkimage_pmap"}
#>>>
test basic-1.16 {pixel::tkimage::do_frame not a tkimage pmap} -body { #<<<
	set pmap	[pixel::pmap_new 100 100 0x0]
	pixel::tkimage::do_frame $pmap
} -cleanup {
	if {[info exists pmap]} {
		unset pmap
	}
} -returnCodes {
	error
} -result {Specified pmap is not a display buffer}
#>>>

::tcltest::cleanupTests
return
